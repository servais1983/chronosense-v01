#!/usr/bin/env python3
"""
Chronosense v0.1 - Classe principale de l'application
G√®re l'interface utilisateur Tkinter et coordonne les autres composants

Auteur: G√©n√©r√© automatiquement
Version: 0.1 (Preuve de Concept)
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
from graph_manager import GraphManager
from ai_manager import AIManager

class ChronosenseApp:
    """
    Classe principale de l'application Chronosense
    G√®re l'interface utilisateur Tkinter et coordonne les interactions
    entre le gestionnaire de graphe et le gestionnaire d'IA
    """
    
    def __init__(self):
        """
        Initialise l'application Chronosense
        """
        self.root = tk.Tk()
        self.root.title("Chronosense v0.1 - Assistant d'Investigation DFIR")
        self.root.geometry("1200x800")
        self.root.minsize(800, 600)
        
        # Initialiser les gestionnaires
        self.graph_manager = GraphManager()
        self.ai_manager = AIManager()
        
        # Variables pour l'interface
        self.artifact_var = tk.StringVar()
        self.selected_nodes = []
        
        # Cr√©er l'interface utilisateur
        self._create_interface()
        
        # Configurer les √©v√©nements
        self._setup_events()
        
        print("Application Chronosense initialis√©e avec succ√®s")
    
    def _create_interface(self):
        """
        Cr√©e l'interface utilisateur principale
        """
        # Frame principal
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame sup√©rieur pour le contenu principal
        content_frame = ttk.Frame(main_frame)
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # Zone de gauche (70%) - Graphe
        self.graph_frame = ttk.LabelFrame(content_frame, text="Graphe d'Investigation", padding=10)
        self.graph_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # Zone de droite (30%) - D√©tails et hypoth√®ses
        self.details_frame = ttk.LabelFrame(content_frame, text="D√©tails et Hypoth√®ses IA", padding=10)
        self.details_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=(5, 0))
        self.details_frame.configure(width=350)
        self.details_frame.pack_propagate(False)
        
        # Zone de texte pour les d√©tails
        self.details_text = scrolledtext.ScrolledText(
            self.details_frame, 
            wrap=tk.WORD, 
            height=20,
            font=("Consolas", 10)
        )
        self.details_text.pack(fill=tk.BOTH, expand=True)
        
        # Bouton pour g√©n√©rer les hypoth√®ses
        self.generate_btn = ttk.Button(
            self.details_frame,
            text="üß† G√©n√©rer des Hypoth√®ses",
            command=self._generate_hypotheses_threaded
        )
        self.generate_btn.pack(fill=tk.X, pady=(10, 0))
        
        # Frame inf√©rieur pour les contr√¥les
        controls_frame = ttk.LabelFrame(main_frame, text="Contr√¥les", padding=10)
        controls_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Contr√¥les d'ajout d'art√©facts
        artifact_frame = ttk.Frame(controls_frame)
        artifact_frame.pack(fill=tk.X)
        
        ttk.Label(artifact_frame, text="Art√©fact:").pack(side=tk.LEFT, padx=(0, 5))
        
        self.artifact_entry = ttk.Entry(
            artifact_frame, 
            textvariable=self.artifact_var,
            font=("Consolas", 10),
            width=50
        )
        self.artifact_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        self.add_btn = ttk.Button(
            artifact_frame,
            text="‚ûï Ajouter Art√©fact",
            command=self._add_artifact
        )
        self.add_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.link_btn = ttk.Button(
            artifact_frame,
            text="üîó Lier N≈ìuds S√©lectionn√©s",
            command=self._link_selected_nodes
        )
        self.link_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.clear_btn = ttk.Button(
            artifact_frame,
            text="üóëÔ∏è Effacer Graphe",
            command=self._clear_graph
        )
        self.clear_btn.pack(side=tk.LEFT)
        
        # Barre de statut
        self.status_var = tk.StringVar()
        self.status_var.set("Pr√™t - Ajoutez des art√©facts pour commencer l'investigation")
        
        status_frame = ttk.Frame(main_frame)
        status_frame.pack(fill=tk.X, pady=(5, 0))
        
        self.status_label = ttk.Label(
            status_frame, 
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        self.status_label.pack(fill=tk.X)
        
        # Initialiser l'affichage du graphe
        self.graph_manager.setup_display(self.graph_frame)
        
        # Message d'accueil
        welcome_msg = """üîç Bienvenue dans Chronosense v0.1
        
Assistant d'Investigation DFIR avec IA Locale

üìã Instructions:
1. Ajoutez des art√©facts (IP, hash, fichiers, processus...)
2. Liez les art√©facts entre eux pour cr√©er des relations
3. Cliquez sur "G√©n√©rer des Hypoth√®ses" pour l'analyse IA
4. L'IA analysera le graphe et proposera des hypoth√®ses d'attaque

üí° Exemples d'art√©facts:
‚Ä¢ IP: 192.168.1.100, 8.8.8.8
‚Ä¢ Hash: abc123def456...
‚Ä¢ Fichier: evil.exe, malware.dll
‚Ä¢ Processus: powershell.exe, cmd.exe
‚Ä¢ Domaine: malicious-site.com

üéØ L'objectif est de construire un graphe d'investigation
et d'utiliser l'IA pour identifier des patterns d'attaque."""
        
        self.details_text.insert(tk.END, welcome_msg)
    
    def _setup_events(self):
        """
        Configure les √©v√©nements de l'interface
        """
        # Entr√©e sur Enter pour ajouter un art√©fact
        self.artifact_entry.bind('<Return>', lambda e: self._add_artifact())
        
        # √âv√©nement de fermeture de fen√™tre
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
    
    def _add_artifact(self):
        """
        Ajoute un art√©fact au graphe d'investigation
        """
        artifact = self.artifact_var.get().strip()
        
        if not artifact:
            messagebox.showwarning("Attention", "Veuillez saisir un art√©fact")
            return
        
        try:
            # Ajouter le n≈ìud au graphe
            node_id = self.graph_manager.add_node(artifact)
            
            # Mettre √† jour l'affichage
            self.graph_manager.update_display()
            
            # Effacer le champ de saisie
            self.artifact_var.set("")
            
            # Mettre √† jour le statut
            self.status_var.set(f"Art√©fact ajout√©: {artifact} (ID: {node_id})")
            
            # Mettre √† jour les d√©tails
            self._update_details_display()
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'ajout de l'art√©fact: {e}")
    
    def _link_selected_nodes(self):
        """
        Lie les n≈ìuds s√©lectionn√©s dans le graphe
        """
        # Pour la v0.1, on utilise une m√©thode simple de s√©lection
        # Dans une version future, on pourrait impl√©menter une s√©lection graphique
        
        # Demander √† l'utilisateur les IDs des n≈ìuds √† lier
        dialog = NodeSelectionDialog(self.root, self.graph_manager.get_all_nodes())
        if dialog.result:
            node1, node2 = dialog.result
            try:
                self.graph_manager.add_edge(node1, node2)
                self.graph_manager.update_display()
                self.status_var.set(f"Lien cr√©√© entre {node1} et {node2}")
                self._update_details_display()
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la cr√©ation du lien: {e}")
    
    def _clear_graph(self):
        """
        Efface compl√®tement le graphe
        """
        if messagebox.askyesno("Confirmation", "√ätes-vous s√ªr de vouloir effacer tout le graphe ?"):
            self.graph_manager.clear_graph()
            self.graph_manager.update_display()
            self.status_var.set("Graphe effac√©")
            self._update_details_display()
    
    def _update_details_display(self):
        """
        Met √† jour l'affichage des d√©tails du graphe
        """
        details = self.graph_manager.get_graph_summary()
        
        # Effacer le contenu actuel (sauf le message d'accueil si le graphe est vide)
        if self.graph_manager.get_node_count() > 0:
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(tk.END, f"üìä R√©sum√© du Graphe:\n\n{details}\n\n")
            self.details_text.insert(tk.END, "üí° Cliquez sur 'G√©n√©rer des Hypoth√®ses' pour l'analyse IA")
    
    def _generate_hypotheses_threaded(self):
        """
        Lance la g√©n√©ration d'hypoth√®ses dans un thread s√©par√©
        pour √©viter de bloquer l'interface
        """
        if self.graph_manager.get_node_count() == 0:
            messagebox.showwarning("Attention", "Ajoutez au moins un art√©fact avant de g√©n√©rer des hypoth√®ses")
            return
        
        # D√©sactiver le bouton pendant le traitement
        self.generate_btn.configure(state='disabled', text="üîÑ G√©n√©ration en cours...")
        self.status_var.set("G√©n√©ration d'hypoth√®ses en cours...")
        
        # Lancer dans un thread
        thread = threading.Thread(target=self._generate_hypotheses)
        thread.daemon = True
        thread.start()
    
    def _generate_hypotheses(self):
        """
        G√©n√®re les hypoth√®ses d'investigation avec l'IA
        """
        try:
            # Obtenir la description du graphe
            graph_description = self.graph_manager.get_graph_description()
            
            # G√©n√©rer les hypoth√®ses avec l'IA
            hypotheses = self.ai_manager.generate_hypotheses(graph_description)
            
            # Mettre √† jour l'interface dans le thread principal
            self.root.after(0, self._display_hypotheses, hypotheses)
            
        except Exception as e:
            self.root.after(0, self._display_error, str(e))
    
    def _display_hypotheses(self, hypotheses):
        """
        Affiche les hypoth√®ses g√©n√©r√©es par l'IA
        """
        # R√©activer le bouton
        self.generate_btn.configure(state='normal', text="üß† G√©n√©rer des Hypoth√®ses")
        
        # Afficher les hypoth√®ses
        self.details_text.delete(1.0, tk.END)
        self.details_text.insert(tk.END, "ü§ñ Analyse IA - Hypoth√®ses d'Investigation:\n\n")
        self.details_text.insert(tk.END, hypotheses)
        
        self.status_var.set("Hypoth√®ses g√©n√©r√©es avec succ√®s")
    
    def _display_error(self, error_msg):
        """
        Affiche une erreur lors de la g√©n√©ration d'hypoth√®ses
        """
        # R√©activer le bouton
        self.generate_btn.configure(state='normal', text="üß† G√©n√©rer des Hypoth√®ses")
        
        messagebox.showerror("Erreur IA", f"Erreur lors de la g√©n√©ration d'hypoth√®ses:\n{error_msg}")
        self.status_var.set("Erreur lors de la g√©n√©ration d'hypoth√®ses")
    
    def _on_closing(self):
        """
        G√®re la fermeture de l'application
        """
        if messagebox.askokcancel("Quitter", "Voulez-vous vraiment quitter Chronosense ?"):
            self.root.destroy()
    
    def run(self):
        """
        Lance l'application
        """
        print("Lancement de l'interface graphique...")
        self.root.mainloop()


class NodeSelectionDialog:
    """
    Dialogue simple pour s√©lectionner deux n≈ìuds √† lier
    """
    
    def __init__(self, parent, nodes):
        self.result = None
        
        if len(nodes) < 2:
            messagebox.showwarning("Attention", "Il faut au moins 2 n≈ìuds pour cr√©er un lien")
            return
        
        # Cr√©er la fen√™tre de dialogue
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("S√©lectionner les n≈ìuds √† lier")
        self.dialog.geometry("400x300")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # Centrer la fen√™tre
        self.dialog.geometry("+%d+%d" % (parent.winfo_rootx() + 50, parent.winfo_rooty() + 50))
        
        # Interface
        ttk.Label(self.dialog, text="S√©lectionnez deux n≈ìuds √† lier:").pack(pady=10)
        
        # Premier n≈ìud
        ttk.Label(self.dialog, text="Premier n≈ìud:").pack(anchor=tk.W, padx=20)
        self.node1_var = tk.StringVar()
        self.node1_combo = ttk.Combobox(self.dialog, textvariable=self.node1_var, values=nodes, state="readonly")
        self.node1_combo.pack(fill=tk.X, padx=20, pady=5)
        
        # Deuxi√®me n≈ìud
        ttk.Label(self.dialog, text="Deuxi√®me n≈ìud:").pack(anchor=tk.W, padx=20, pady=(10, 0))
        self.node2_var = tk.StringVar()
        self.node2_combo = ttk.Combobox(self.dialog, textvariable=self.node2_var, values=nodes, state="readonly")
        self.node2_combo.pack(fill=tk.X, padx=20, pady=5)
        
        # Boutons
        button_frame = ttk.Frame(self.dialog)
        button_frame.pack(pady=20)
        
        ttk.Button(button_frame, text="Cr√©er le lien", command=self._ok).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Annuler", command=self._cancel).pack(side=tk.LEFT, padx=5)
        
        # Attendre la fermeture
        self.dialog.wait_window()
    
    def _ok(self):
        node1 = self.node1_var.get()
        node2 = self.node2_var.get()
        
        if not node1 or not node2:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner les deux n≈ìuds")
            return
        
        if node1 == node2:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner deux n≈ìuds diff√©rents")
            return
        
        self.result = (node1, node2)
        self.dialog.destroy()
    
    def _cancel(self):
        self.dialog.destroy()
